# Instruction Set

- 명령어들의 집합
- 다른 컴퓨터들은 다른 instruction set을 가짐
    - 대부분의 경우 많은 부분을 공유함
- 초창기 컴퓨터들은 매우 단순한 instruction set을 가짐
    - 수가 적음
    - ⇒ Complex
- 최근 modern computers 또한 ⇒ simple instruction sets 을 가짐

# Instruction Set Architecture (ISA)

- 하드웨어와 소프트웨어의 가장 낮은 레벨 체제 중에 추상화된 인터페이스
- 필요한 정보를 머신에 주는 것
- instructions, registers, memory access, I/O 등 정보 포함
- 성능과 비용에 따라 다른 implementations가 가능
- 다른 소프트웨어를 여러 개 CPU에서 실행 가능
- Application Binary Interface (ABI)
    - ABI - ABI만 같으면 다른 컴퓨터에서도 실행 가능
    - user portion of instruction set plus the operating system interfaces used by application programmers.
    - defines a standard for binary portability across computers
    

## The MIPS Instruction Set

Million Instruction Per Second

= CPU 이름

Stanford 에서 상용화해서 MIPS tech를 이용해

- 임베드 시스템에 많이 쓰임 cf) ARM
- 다른 많은 CPU들에서 MIPS의 속성이 공유됨

# 2.2 하드웨어 연산

## 수리 연산

- - + three operands
- add a, b, c
- **Design Principle 1 : 간단하기 위해서는 규칙적인 것이 좋다**
    - 규칙성은 간단함을 만든다
- C code

f = ( g + h ) - ( i + j );

→ Compiled MIPS Code:

add t0, g, h # temp t0 = g + h

add t1, i, j  # temp t1 = i + j

sub f, t0, t1 

### 피연산자

### 레지스터

- 레지스터 : 하드웨어 설계의 기본 요소인 동시에 프로그래머에게도 보이는 부분, 컴퓨터의 벽돌과 같음
    - ARM 구조에서 레지스터 크기는 32bit
- 어셈블러 네임
    - $t0, $t1, …. for temporary values
    - $s0, $s1, … for saved variables
    - 
- **Design Principle 2 : 작은 것이 더 빠르다**
    - main memory : millions of locations
    - 

### Byte Addresses

8-bit =  1bytes 가 유용하기 때문에, byte 단위로 메모리를 지정한다.

32bit = 워드

- Big Endian : leftmost byte is word address - 큰 값을 끝에 놓는다
    - IBM 360/370, Motorola 68k, MIPS, Sparc, HP PA
- Little Endian : rightmost byte is word address - 작은 값을 끝에 놓는다
    - Intel 80*86, DEC Vax, DEC Alpha(Windows NT)

## 메모리 피연산자 (Memory Operands)

- composite data에 이용되는 메인 메모리
    - 배열(Arrays), 구조체(Structures), dynamic data
    
    ㄴ 레지스터 개수보다 많은 데이터 원소가 있을 수 있음
    

ARM의 산술연산은 레지스터에 대해서만 실행됨

→ 메모리와 레지스터 간 데이터를 주고받는 명령어가 있어야 함

- 데이터 전송 명령어 : 메모리와 레지스터 간 데이터를 주고받는 명령어

- 프로세서 vs 메모리
    - 프로세서 : 소량의 데이터만을 레지스터에 저장 가능
    - 메모리 : 수십억 개의 데이터 저장 가능
    
- 주소 : 메모리 배열 내에서 특정 데이터 요소의 위치를 표시하는 데 사용하는 값
    - 메모리 : 주소가 인덱스 역할을 하는 큰 1차원 배열
- 적재 (load) : 메모리에서 레지스터로 데이터를 복사해오는 데이터 전송 명령
    - 연산자 이름
    - 메모리에서 읽어온 값을 저장할 레지스터
    - 메모리 접근에 사용할 상수
    - 레지스터
        - 메모리 주소 = 명령어의 상수 부분 + 두 번째 레지스터  값의 합으로 구해짐
        - LDR(LoaD word into Register)

- 저장 (store) : 레지스터에서 메모리로 데이터를 보내는 명령
    - 생김새는 적재와 같음
    - 연산자 이름
    - 저장할 데이터를 갖고 있는 레지스터
    - 배열 원소 선택에 사용할 변위
    - 베이스 레지스터
    - 주소의 일부는 상수 형태로 명령어에 포함, 일부는 레지스터에 기억
    - STR (STore word from a Register)

- 수리 연산에 적용하기 위해
    - memory로부터 values를 로드해 레지스터에 불러오기 위해
    - 연산의 결과를 레지스터에서 메모리로 저장하기 위해
- 메모리는 바이트 address
    - 각각의 주소는 8-bit byte
- Words는 메모리에 나란히 세워진다
    - Address must be 4의 배수
- MIPS 은 Big Endian
    - Most-significant byte 적어도 한 워드의 address
    - Little Endian : least-significant byte at least address

### Example 1

C code

g = h + A[8]

g in $s1, h in $s2, base address of A in $s3

Compiled MIPS Code

index 8 * 4 = 32byte 필요

ㄴ 4byte per word

lw(load word) $t0 32($s3)   #load word

add $s1, $s2, $t0

17:27 ‘’

## Registers vs Memory

- 레지스터가 메모리에 비해 접근하는 속도가 빠르다
- 메모리 데이터를 연산하는 데는 load와 store가 피룡하다
- 컴파일러는 변수를 다루기 위해 최대한 많은 레지스터를 사용해야 한다
    - 레지스터 최적화는 중요하다.

## MIPS Register File

Holds 32bit registers

- 2 read ports
- 1 write port

### 레지스터

- 메인 메모리보다 빠르다
    - 더 많은 공간을 차지하는 레지스터 파일은 더 느리다
    - Read/write port 증가는 2차적으로 스피드에 영향을 미친다
    - 컴파일러가 쓰기에 편리하다
    - code desity 코드 집적도를 개선한다
        - instructions 수가 작아짐
        - 레지스터(5bit)는 메모리 장소(32bit)에 비해 메모리가 bit가 덜 필요하기 때문

![11.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e027106c-3bf4-4fc8-bd60-a5d7b1721cf5/11.png)

## Immediate 피연산자

- **Design Principle 3 : 자주 사용하는 것을 빠르게 만들어라** Make the common case fast
    - load instructions의 수를 줄여줌

## Constant Zero

- MIPS register 0 ($zero) is the 상수 0
    - overwritten 될 수 없음
- common operations에 유용
    - move between registers
        - add $t2, $s1 $0