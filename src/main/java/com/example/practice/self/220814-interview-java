JAVA
1.	자바의 특징 혹은 자바 언어의 장점 : 
1.	배우기 쉽다
2.	객체 지향적 : 모듈 방식 프로그램과 재사용 가능한 코드를 작성할 수 있다.
3.	플랫폼에 독립적 : 한 시스템에서 다른 시스템으로 쉽게 이동 가능 
2.	변수란 무엇이며, 변수의 종류는 어떠한 것이 있나
1.	변수란 : Data를 담아두는 Memory 공간
2.	변수의 종류
A.	클래스 변수 : 클래스가 처음 호출될 때 시작하여 프로그램이 끝날 때 소멸 
B.	인스턴스 변수 : 객체가 생성될 때 시작 해당 객체를 참조하는 객체가 없을 때 소멸
C.	지역 변수 : method 안에서만 유효함, 다른 곳에서 부를 수 없음
D.	매개 변수 : method가 호출될 때 시작, method가 끝날 때 소멸 
3.	변수의 명명 규칙, 자바의 네이밍 규칙
이건 면접 질문이기도 하지만 실무 나가서 모르면 엄청 욕먹습니다.
1) 대소문자는 구분된다.
2) 예약어 사용 불가
3) 숫자로 시작해선 안 된다.
4) 특수문자는 _ 와 $ 만 허용한다
5) 첫 글자는 소문자로 시작하는 명사로 짓는다.
6) 카멜 표기법 사용한다.
 
4.	변수를 사용하는 목적이 무엇인가
1.	
5.	제어문 실습 문제 복습(코딩테스트 대비)
간단한 코딩 테스트는 실습 문제 풀 수 있는 정도 수준이면 가능하지만, 알고리즘으로 풀어야 하는 입사 시험 문제는 별도로 한 달 이상 따로 공부하셔야 합니다. 자료구조 알고리즘 따로 공부하기 부담스러우시면, 난이도 높은 입사 시험이 있는 회사는 경험으로만 보셔도 됩니다.
6.	배열, 2차원 배열 실습 문제 복습(위와 동일한 이유)
7.	객체 지향 언어란 무엇인가
1.	프로그램을 다수의 객체로 만들고, 이들끼리 서로 상호작용하도록 만드는 프로그래밍 언어 
2.	Cf. 절차지향언어 : 순서대로…
8.	객체란 무엇인가
9.	객체지향의 3대 원칙(혹은 4대 원칙)
1.	캡슐화 : 데이터와 알고리즘을 하나로 묶어 하나의 캡슐처럼 만드는 것입니다. 이 특징 때문에 데이터와 코드의 형태를 외부에서 알 수 없습니다. 당연히 캡슐화되어있지 않은 데이터와 코드는 사용하기 어렵습니다.
2.	상속 : 부모가 자식에게 유전자를 물려주듯, 상위 클래스의 모든 것을 하위 클래스가 이어 받는 것입니다.
3.	다형성 : 상속과 연관된 개념으로, 하나의 객체가 다른 여러 객체로 재구성되는 것입니다. 부모가 쌍둥이 자식을 낳으면 부모의 유전자가 두 명의 자식으로 재구성되는 것과 같은 이치입니다.
하지만, 그렇다고 해서 두 쌍둥이(재구성된 객체들)의 유전자가 부모(원 개체)의 유전자와 똑같다고 볼 수는 없습니다.
자바의 오버로드, 혹은 오버라이드 다형성이 이 다형성을 드러내는 대표적인 예입니다.
4.	추상화 : 실존하는 객체의 여러 특성 중, 프로그램을 만드는데 필요한(공통적인) 부분만 파악해서 추출하고 필요하지 않은 것은 제거하는 것입니다.
10.	캡슐화란 무엇인가 : 데이터와 알고리즘을 하나로 묶어 캡슐처럼 만드는 것. 데이터와 코드의 형태를 외부에서 알 수 없다.
11.	상속이란 무엇인가 : 상위 클래스의 모든 것을 하위 클래스가 이어 받는 것
12.	다형성이란 무엇인가 : 하나의 객체가 다른 여러 객체로 재구성되는 것. 자바의 오버로딩, 오버라이딩
13.	추상화란 무엇인가 : 실존하는 객체의 여러 특성 중 프로그램을 만드는 데 필요한 부분만 파악해서 추출하고, 필요 없는 것은 제거하는 것
14.	클래스와 객체의 차이점은 무엇인가 : 객체는 자신 고유의 속성을 가지는 물리적, 추상적인 모든 대상
클래스는 객체들을 소프트웨어 내에서 구현하기 위해 만든 설계도, 이를 통해 생성된 객체 하나하나를 클래스의 인스턴스라 부름 
15.	객체 지향 언어의 장점은 무엇인가 : 
1.	소프트웨어 생산성 향상 : 코드 재사용 지향 
2.	실세계에 대한 쉬운 모델링
3.	보안성 향상 : 캡슐화, 다형성, 데이터 은닉 
16.	클래스에 사용 가능한 접근제한자와 키워드가 무엇이 있나(의미도 함께) : public, default
1.	Public : 모든 대상
2.	Protected : 같은 패키지 or 자식 클래스
3.	Default : 같은 패키지
4.	Private : 클래스 내부 
17.	생성자에 사용 가능한 접근제한자와 키워드 : public, protected, default, private
18.	필드에 사용 가능한 접근제한자와 키워드(의미 명확하게 알 것) : public protected, default, private
19.	메소드에 사용 가능한 접근제한자와 키워드 : public, protected, default, private
20.	final 키워드의 사용 가능 위치와 그 의미에 대해 설명 : 변수, 메서드, 클래스에서 사용 가능. 
1.	변수 : 이 변수 수정 불가, 초기화 필수
2.	메서드 : override 제한
3.	클래스 : 상속 불가능 
21.	오버로딩이 무엇인가 : 같은 메소드명을 가졌지만 매개변수가 다른 메소드를 선언하는 것 
22.	오버로딩의 성립 요건이 무엇인가
1.	메소드 이름이 같아야 함
2.	리턴형이 같아도 되고 달라도 됨
3.	파라미터 개수가 달라야 함
4.	파라미터 개수가 같을 경우 데이터 타입이 달라야 함
23.	오버라이딩이 무엇인가 : 상속 관계에 있는 클래스 간에 같은 이름의 메소드를 정의하는 기술 
24.	오버라이딩의 성립 요건이 무엇인가
1.	오버라이드하고자 하는 메소드가 상위 클래스에 존재해야 함
2.	메소드 이름이 같아야 함
3.	파라미터 개수, 자료형이 같아야 함
4.	리턴형이 같아야 함
5.	상위 메소드와 동일하거나 내용이 추가돼야 함
